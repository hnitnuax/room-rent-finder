const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const multer = require("multer");
const { User } = require("../models/User");
const { Role } = require("../models/Role");

const router = express.Router();

/* üìå C·∫•u h√¨nh Multer ƒë·ªÉ upload ·∫£nh ƒë·∫°i di·ªán */
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, "public/uploads/");
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + "-" + file.originalname);
    },
});

const upload = multer({ storage });

/* üìå API ƒêƒÉng k√Ω Ng∆∞·ªùi D√πng */
router.post("/register", upload.single("profileImage"), async (req, res) => {
    try {
        const { hoTen, email, password, loaiUser } = req.body;
        const profileImage = req.file ? req.file.path : "";

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(409).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const salt = await bcrypt.genSalt();
        const hashedPassword = await bcrypt.hash(password, salt);

        // X√°c ƒë·ªãnh role m·∫∑c ƒë·ªãnh
        let role;
        if (loaiUser === "Admin") {
            role = await Role.findOne({ tenRole: "Admin" });
        } else if (loaiUser === "NhanVien") {
            role = await Role.findOne({ tenRole: "Nh√¢n vi√™n" });
        } else {
            role = await Role.findOne({ tenRole: "Kh√°ch h√†ng" });
        }

        if (!role) {
            return res.status(400).json({ message: "Lo·∫°i ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
        }

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi
        const newUser = new User({
            hoTen,
            email,
            matKhau: hashedPassword,
            anhDaiDien: profileImage,
            loaiUser,
            role: role._id,
        });

        // L∆∞u ng∆∞·ªùi d√πng v√†o database
        await newUser.save();

        res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
    } catch (error) {
        res.status(500).json({ message: "L·ªói ƒëƒÉng k√Ω!", error: error.message });
    }
});

/* üìå API ƒêƒÉng nh·∫≠p */
router.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body;

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await User.findOne({ email }).populate("role");
        if (!user) {
            return res.status(404).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
        }

        // So s√°nh m·∫≠t kh·∫©u b·∫±ng ph∆∞∆°ng th·ª©c `kiemTraMatKhau()`
        const isMatch = await user.kiemTraMatKhau(password);
        if (!isMatch) {
            console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
            console.log("pass nh·∫≠p: ", password);
            console.log("matKhau user: ", user.matKhau);
            return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
        }

        console.log("‚úÖ M·∫≠t kh·∫©u ƒë√∫ng!");

        // T·∫°o token JWT (B·∫Øt l·ªói n·∫øu c√≥)
        let token;
        try {
            token = jwt.sign(
                { id: user._id, role: user.role.tenRole },
                process.env.JWT_SECRET,
                { expiresIn: "7d" }
            );
        } catch (jwtError) {
            console.error("‚ùå L·ªói khi t·∫°o JWT Token:", jwtError.message);
            return res.status(500).json({ message: "L·ªói h·ªá th·ªëng khi t·∫°o token!" });
        }

        // Kh√¥ng g·ª≠i m·∫≠t kh·∫©u v·ªÅ client
        const userResponse = { ...user.toObject(), matKhau: undefined };

        console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Tr·∫£ v·ªÅ token.");
        res.status(200).json({ token, user: userResponse });
    } catch (error) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p:", error.message);
        res.status(500).json({ message: "L·ªói ƒëƒÉng nh·∫≠p!", error: error.message });
    }
});
/* üìå API L·∫•y Th√¥ng Tin Ng∆∞·ªùi D√πng */
router.get("/me", async (req, res) => {
    try {
        const token = req.header("Authorization");
        if (!token) {
            return res.status(401).json({ message: "Kh√¥ng c√≥ token, t·ª´ ch·ªëi truy c·∫≠p!" });
        }

        // Gi·∫£i m√£ token
        const decoded = jwt.verify(token.replace("Bearer ", ""), process.env.JWT_SECRET);
        const user = await User.findById(decoded.id).populate("role");

        if (!user) {
            return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        }

        res.json({ user });
    } catch (error) {
        res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
    }
});

module.exports = router;
